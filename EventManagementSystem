
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

// Abstract User class representing different user roles
abstract class User {
    private String name;
    private String email;

    public User(String name, String email) {
        this.name = name;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public abstract void displayMenu();
}

class Administrator extends User {
    public Administrator(String name, String email) {
        super(name, email);
    }

    @Override
    public void displayMenu() {
        System.out.println("Administrator Menu:");
        System.out.println("1. View Events");
        System.out.println("2. Generate Reports");
        System.out.println("3. Exit");
    }

    public void generateReports(ArrayList<Event> events) {
        System.out.println("Generating reports...");
        System.out.println("Total Events: " + events.size());
    }

    public void viewEvents(ArrayList<Event> events) {
        System.out.println("Viewing all events:");
        for (Event event : events) {
            System.out.println(event);
            System.out.println("-------------------------------");
        }
    }
}

class Organizer extends User {
    private ArrayList<Event> events;
    private static final String[] CATEGORIES = {"Wedding", "Conference", "Concert", "Corporate Meeting"};

    public Organizer(String name, String email) {
        super(name, email);
        this.events = new ArrayList<>();
    }

    @Override
    public void displayMenu() {
        System.out.println("Organizer Menu:");
        System.out.println("1. Create Event");
        System.out.println("2. Update Event");
        System.out.println("3. View Events");
        System.out.println("4. Exit");
    }

    public void createEvent(String name, String date, String time, String venue, String description, String category) {
        if (!isValidCategory(category)) {
            System.out.println("Invalid category. Event not created.");
            return;
        }

        // Check for event conflicts
        if (isEventConflict(date, time, venue)) {
            System.out.println("Conflict detected: Another event is already scheduled at the same date, time, and venue.");
            return;
        }

        String eventCode = generateEventCode();
        Event event = new Event(name, date, time, venue, description, category, "Upcoming", eventCode);
        events.add(event);
        System.out.println("Event created successfully. Event Code: " + eventCode);
    }

    private boolean isEventConflict(String date, String time, String venue) {
        for (Event event : events) {
            if (event.getDate().equals(date) && event.getTime().equals(time) && event.getVenue().equalsIgnoreCase(venue)) {
                return true;
            }
        }
        return false;
    }

    public void updateEvent(String oldEventName, String newEventName, String date, String time, String venue, String description, String category) {
        for (Event event : events) {
            if (event.getName().equals(oldEventName)) {
                // Check for event conflicts before updating
                if (isEventConflict(date, time, venue)) {
                    System.out.println("Conflict detected: Another event is already scheduled at the same date, time, and venue.");
                    return;
                }
                event.setName(newEventName);
                event.setDate(date);
                event.setTime(time);
                event.setVenue(venue);
                event.setDescription(description);
                event.setCategory(category);
                System.out.println("Event updated successfully.");
                return;
            }
        }
        System.out.println("Event not found.");
    }

    public void viewEvents() {
        System.out.println("Viewing your events:");
        for (Event event : events) {
            System.out.println(event);
            System.out.println("-------------------------------");
        }
    }

    public ArrayList<Event> getEvents() {
        return events;
    }

    private boolean isValidCategory(String category) {
        for (String validCategory : CATEGORIES) {
            if (validCategory.equalsIgnoreCase(category)) {
                return true;
            }
        }
        return false;
    }

    private String generateEventCode() {
        return "EVT" + (events.size() + 1);
    }

    public static String[] getCategories() {
        return CATEGORIES;
    }
}

class Attendee extends User {
    public Attendee(String name, String email) {
        super(name, email);
    }

    @Override
    public void displayMenu() {
        System.out.println("Attendee Menu:");
        System.out.println("1. View Events");
        System.out.println("2. Provide Feedback");
        System.out.println("3. Exit");
    }

    public void viewEvents(ArrayList<Event> events) {
        System.out.println("Viewing all events:");
        for (Event event : events) {
            System.out.println(event);
            System.out.println("-------------------------------");
        }
    }
}

class Event {
    private String name;
    private String date;
    private String time;
    private String venue;
    private String description;
    private String category;
    private String status;
    private String eventCode;

    public Event(String name, String date, String time, String venue, String description, String category, String status, String eventCode) {
        this.name = name;
        this.date = date;
        this.time = time;
        this.venue = venue;
        this.description = description;
        this.category = category;
        this.status = status;
        this.eventCode = eventCode;
    }

    public String getName() {
        return name;
    }

    public String getDate() {
        return date;
    }

    public String getTime() {
        return time;
    }

    public String getVenue() {
        return venue;
    }

    public String getDescription() {
        return description;
    }

    public String getCategory() {
        return category;
    }

    public String getStatus() {
        return status;
    }

    public String getEventCode() {
        return eventCode;
    }

    @Override
    public String toString() {
        return "Event Name: " + name + "\nDate: " + date + "\nTime: " + time + "\nVenue: " + venue + 
               "\nDescription: " + description + "\nCategory: " + category + "\nStatus: " + status + 
               "\nEvent Code: " + eventCode;
    }

    void setDescription(String description) {
        this.description = description;
    }

    void setVenue(String venue) {
        this.venue = venue;
    }

    void setTime(String time) {
        this.time = time;
    }

    void setDate(String date) {
        this.date = date;
    }

    void setName(String newEventName) {
        this.name = newEventName;
    }

    void setCategory(String category) {
        this.category = category;
    }
}

class EventFileHandler {
    private static final String FILE_NAME = "events.txt";

    public static void saveEvents(ArrayList<Event> events) {
        try (FileWriter writer = new FileWriter(FILE_NAME)) {
            for (Event event : events) {
                writer.write(event.toString().replace("\n", ",") + "\n");
            }
        } catch (IOException e) {
            System.out.println("Error saving events: " + e.getMessage());
        }
    }

    public static ArrayList<Event> loadEvents() {
        ArrayList<Event> events = new ArrayList<>();
        File file = new File(FILE_NAME);
        if (file.exists()) {
            try (FileReader reader = new FileReader(FILE_NAME);
                 Scanner scanner = new Scanner(reader)) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] fields = line.split(",");
                    if (fields.length == 8) {
                        events.add(new Event(fields[0], fields[1], fields[2], fields[3], fields[4], fields[5], fields[6], fields[7]));
                    }
                }
            } catch (IOException e) {
                System.out.println("Error loading events: " + e.getMessage());
            }
        }
        return events;
    }
}

public class EventManagementSystem {
    public static void main(String[] args) {

	System.out.println("Welcome to Event Managment System\n");
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter your role:\n1. Administrator\n2. Organizer\n3. Attendee");
        int role = scanner.nextInt();
        scanner.nextLine();

        User user = null;
        if ( role == 1 || role == 2 || role == 3) {
            System.out.print("Enter your name: ");
            String name = scanner.nextLine();
            System.out.print("Enter your email: ");
            String email = scanner.nextLine();

            switch (role) {
                case 1:
                    user = new Administrator(name, email);
                    break;
                case 2:
                    user = new Organizer(name, email);
                    break;
                case 3:
                    user = new Attendee(name, email);
                    break;
            }
        } else {
            System.out.print("Please enter correct role\n");
        }

        ArrayList<Event> events = EventFileHandler.loadEvents();

        while (true) {
            user.displayMenu();
            System.out.println("Enter your choice:");
            int choice = scanner.nextInt();
            scanner.nextLine();

            if (user instanceof Administrator) {
                Administrator admin = (Administrator) user;
                if (choice == 1) {
                    admin.viewEvents(events);
                } else if (choice == 2) {
                    admin.generateReports(events);
                } else if (choice == 3) {
                    break;
                }
            } else if (user instanceof Organizer) {
                Organizer organizer = (Organizer) user;
                if (choice == 1) {
                    System.out.println("Select event category:");
                    String[] categories = Organizer.getCategories();
                    for (int i = 0; i < categories.length; i++) {
                        System.out.println((i + 1) + ". " + categories[i]);
                    }
                    System.out.print("Enter the number of the category: ");
                    int categoryChoice = scanner.nextInt();
                    scanner.nextLine();

                    if (categoryChoice < 1 || categoryChoice > categories.length) {
                        System.out.println("Invalid category choice. Event not created.");
                        continue;
                    }
                    String eventCategory = categories[categoryChoice - 1];

                    System.out.print("Enter event name: ");
                    String eventName = scanner.nextLine();
                    System.out.print("Enter event date: ");
                    String eventDate = scanner.nextLine();
                    System.out.print("Enter event time: ");
                    String eventTime = scanner.nextLine();
                    System.out.print("Enter event venue: ");
                    String eventVenue = scanner.nextLine();
                    System.out.print("Enter event description: ");
                    String eventDescription = scanner.nextLine();

                    organizer.createEvent(eventName, eventDate, eventTime, eventVenue, eventDescription, eventCategory);
                    EventFileHandler.saveEvents(organizer.getEvents());
                } else if (choice == 2) {
                    System.out.print("Enter the event name to update: ");
                    String oldEventName = scanner.nextLine();

                    System.out.print("Enter new event name: ");
                    String newEventName = scanner.nextLine();
                    System.out.print("Enter event date: ");
                    String eventDate = scanner.nextLine();
                    System.out.print("Enter event time: ");
                    String eventTime = scanner.nextLine();
                    System.out.print("Enter event venue: ");
                    String eventVenue = scanner.nextLine();
                    System.out.print("Enter event description: ");
                    String eventDescription = scanner.nextLine();
                    System.out.print("Enter event category: ");
                    String eventCategory = scanner.nextLine();

                    organizer.updateEvent(oldEventName, newEventName, eventDate, eventTime, eventVenue, eventDescription, eventCategory);
                    EventFileHandler.saveEvents(organizer.getEvents());
                } else if (choice == 3) {
                    organizer.viewEvents();
                } else if (choice == 4) {
                    break;
                }
            } else if (user instanceof Attendee) {
                Attendee attendee = (Attendee) user;
                if (choice == 1) {
                    attendee.viewEvents(events);
                } else if (choice == 2) {
                    System.out.println("Write your feedback please");
                    String u_feedback = scanner.nextLine();
                    System.out.println("Thanks for giving your feedback!");
                } else if (choice == 3) {
                    break;
                }
            }

            System.out.println("Do you want to continue? (yes/no): ");
            String continueChoice = scanner.nextLine();
            if (!continueChoice.equalsIgnoreCase("yes")) {
                break;
            }
        }

        scanner.close();
        System.out.println("Exiting the system.");
    }
}
